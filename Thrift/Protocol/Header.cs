/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Communication
{

  #if !SILVERLIGHT
	[Serializable]
	#endif
  public partial class Header : TBase
	{
		private Dictionary<string, string> _headerMap;

		public Dictionary<string, string> HeaderMap {
			get {
				return _headerMap;
			}
			set {
				__isset.headerMap = true;
				this._headerMap = value;
			}
		}

		public Isset __isset;
    #if !SILVERLIGHT
		[Serializable]
		#endif
    public struct Isset
		{
			public bool headerMap;
		}

		public Header ()
		{
		}

		public void Read (TProtocol iprot)
		{
			TField field;
			iprot.ReadStructBegin ();
			while (true) {
				field = iprot.ReadFieldBegin ();
				if (field.Type == TType.Stop) { 
					break;
				}
				switch (field.ID) {
				case 1:
					if (field.Type == TType.Map) {
						{
							HeaderMap = new Dictionary<string, string> ();
							TMap _map0 = iprot.ReadMapBegin ();
							for (int _i1 = 0; _i1 < _map0.Count; ++_i1) {
								string _key2;
								string _val3;
								_key2 = iprot.ReadString ();
								_val3 = iprot.ReadString ();
								HeaderMap [_key2] = _val3;
							}
							iprot.ReadMapEnd ();
						}
					} else { 
						TProtocolUtil.Skip (iprot, field.Type);
					}
					break;
				default: 
					TProtocolUtil.Skip (iprot, field.Type);
					break;
				}
				iprot.ReadFieldEnd ();
			}
			iprot.ReadStructEnd ();
		}

		public void Write (TProtocol oprot)
		{
			TStruct struc = new TStruct ("Header");
			oprot.WriteStructBegin (struc);
			TField field = new TField ();
			if (HeaderMap != null && __isset.headerMap) {
				field.Name = "headerMap";
				field.Type = TType.Map;
				field.ID = 1;
				oprot.WriteFieldBegin (field);
				{
					oprot.WriteMapBegin (new TMap (TType.String, TType.String, HeaderMap.Count));
					foreach (string _iter4 in HeaderMap.Keys) {
						oprot.WriteString (_iter4);
						oprot.WriteString (HeaderMap [_iter4]);
					}
					oprot.WriteMapEnd ();
				}
				oprot.WriteFieldEnd ();
			}
			oprot.WriteFieldStop ();
			oprot.WriteStructEnd ();
		}

		public override string ToString ()
		{
			StringBuilder sb = new StringBuilder ("Header(");
			sb.Append ("HeaderMap: ");
			sb.Append (HeaderMap);
			sb.Append (")");
			return sb.ToString ();
		}

	}

}
